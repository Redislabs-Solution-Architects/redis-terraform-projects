# =============================================================================
# NGINX Configuration for Redis Enterprise Software Load Balancing
# =============================================================================
# Layer 4 (TCP) load balancing with stream module
# Generated by Terraform - DO NOT EDIT MANUALLY
# =============================================================================

# Load the stream module (required for layer 4 load balancing)
load_module /usr/lib/nginx/modules/ngx_stream_module.so;

user www-data;
worker_processes auto;
worker_rlimit_nofile 8192;
pid /var/run/nginx.pid;

# Error log
error_log /var/log/nginx/error.log warn;

events {
    worker_connections 4096;
    use epoll;
    multi_accept on;
}

# HTTP block for status page and basic health checks
http {
    include       /etc/nginx/mime.types;
    default_type  application/octet-stream;

    # Log format
    log_format main '$remote_addr - $remote_user [$time_local] "$request" '
                   '$status $body_bytes_sent "$http_referer" '
                   '"$http_user_agent" "$http_x_forwarded_for"';

    access_log /var/log/nginx/access.log main;

    # Basic settings
    sendfile on;
    tcp_nopush on;
    tcp_nodelay on;
    keepalive_timeout 65;
    types_hash_max_size 2048;

    # Status server for health checks
    server {
        listen 80 default_server;
        server_name _;
        
        location /nginx-status {
            stub_status on;
            access_log off;
            allow 127.0.0.1;
            allow 10.0.0.0/8;
            allow 172.16.0.0/12;
            allow 192.168.0.0/16;
            deny all;
        }
        
        location /health {
            access_log off;
            return 200 "healthy\n";
            add_header Content-Type text/plain;
        }
    }
}

# =============================================================================
# STREAM MODULE - Layer 4 Load Balancing for Redis Enterprise
# =============================================================================

stream {
    # Log format for stream
    log_format stream '$remote_addr [$time_local] $protocol $status $bytes_sent $bytes_received $session_time';
    access_log /var/log/nginx/stream.log stream;

    # =============================================================================
    # REDIS DATABASE LOAD BALANCING
    # =============================================================================
    # Load balance Redis database connections using least_conn method
    # This ensures optimal distribution based on active connections
    
    upstream redis_enterprise_database {
        least_conn;
        %{~ for i, ip in private_ips ~}
        server ${ip}:${database_port} max_fails=3 fail_timeout=30s weight=1;
        %{~ endfor ~}
    }

    server {
        listen ${frontend_database_port};
        proxy_pass redis_enterprise_database;
        
        # Redis-optimized connection settings
        proxy_timeout 3s;
        proxy_responses 1;
        proxy_connect_timeout 3s;
        
        # Enable connection reuse
        proxy_socket_keepalive on;
    }

    # =============================================================================
    # REDIS ENTERPRISE API LOAD BALANCING  
    # =============================================================================
    # Load balance API connections using round-robin (default)
    # Good for stateless API calls
    
    upstream redis_enterprise_api {
        %{~ for i, ip in private_ips ~}
        server ${ip}:${api_port} max_fails=2 fail_timeout=30s weight=1;
        %{~ endfor ~}
    }

    server {
        listen ${frontend_api_port};
        proxy_pass redis_enterprise_api;
        
        # API-optimized connection settings
        proxy_timeout 30s;
        proxy_responses 1;
        proxy_connect_timeout 10s;
        
        # Enable connection reuse for API calls
        proxy_socket_keepalive on;
    }

    # =============================================================================
    # REDIS ENTERPRISE WEB UI LOAD BALANCING
    # =============================================================================  
    # Load balance web UI using IP hash for session affinity
    # This ensures users stay connected to the same node for UI sessions
    
    upstream redis_enterprise_ui {
        hash $remote_addr consistent;
        %{~ for i, ip in private_ips ~}
        server ${ip}:${ui_port} max_fails=2 fail_timeout=30s weight=1;
        %{~ endfor ~}
    }

    server {
        listen ${frontend_ui_port};
        proxy_pass redis_enterprise_ui;
        
        # UI-optimized connection settings
        proxy_timeout 60s;
        proxy_responses 1;
        proxy_connect_timeout 10s;
        
        # Enable connection reuse and session handling
        proxy_socket_keepalive on;
    }

%{~ if additional_database_ports != null ~}
    # =============================================================================
    # ADDITIONAL DATABASE PORTS
    # =============================================================================
    # Load balance additional database endpoints if configured
    
%{~ for port_config in additional_database_ports ~}
    upstream redis_database_${port_config.name} {
        least_conn;
        %{~ for i, ip in private_ips ~}
        server ${ip}:${port_config.backend_port} max_fails=3 fail_timeout=30s;
        %{~ endfor ~}
    }

    server {
        listen ${port_config.frontend_port};
        proxy_pass redis_database_${port_config.name};
        proxy_timeout 1s;
        proxy_responses 1;
        proxy_connect_timeout 1s;
    }
    
%{~ endfor ~}
%{~ endif ~}

%{~ if length(database_port_range_list) > 0 ~}
    # =============================================================================
    # DATABASE PORT RANGE
    # =============================================================================
    # Load balance Redis Enterprise databases across port range
    
%{~ for port in database_port_range_list ~}
    upstream redis_database_port_${port} {
        least_conn;
        %{~ for i, ip in private_ips ~}
        server ${ip}:${port} max_fails=3 fail_timeout=30s weight=1;
        %{~ endfor ~}
    }

    server {
        listen ${port};
        proxy_pass redis_database_port_${port};
        proxy_timeout 3s;
        proxy_responses 1;
        proxy_connect_timeout 3s;
        proxy_socket_keepalive on;
    }
    
%{~ endfor ~}
%{~ endif ~}
}

# =============================================================================
# CONFIGURATION NOTES
# =============================================================================
# 
# Load Balancing Methods:
# - Database (least_conn): Routes to server with fewest active connections
# - API (round-robin): Default method, cycles through servers  
# - UI (hash $remote_addr): IP-based routing for session affinity
#
# Health Checks:
# - max_fails: Number of failed attempts before marking server down
# - fail_timeout: Time to wait before retrying failed server
# - Passive health checking based on connection attempts
#
# Timeouts:
# - proxy_timeout: Max time for establishing connection to backend
# - proxy_connect_timeout: Max time for connecting to backend
# - proxy_read_timeout: Max time waiting for backend response  
# - proxy_send_timeout: Max time sending data to backend
#
# TLS/SSL:
# - UI port uses SSL passthrough (proxy_ssl on)
# - Database and API ports use plain TCP
# - Redis Enterprise handles all TLS termination
#
# =============================================================================